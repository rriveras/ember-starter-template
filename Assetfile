require "rake-pipeline-web-filters"
require "rake-pipeline-web-filters/helpers"
require "rake-pipeline-web-filters/neuter_filter"

class Rake::Pipeline::DSL::PipelineDSL
  # We need this to switch easily between environments and 
  # changing the rules we apply in the assets
  def production?
    ENV['RAKEP_MODE'] == 'production'
  end
end

# All of our outputs will be relative to the `public/`
# directory.
output "public"

input "assets/javascripts" do

  # We take care of the handlebars templates and precompile all
  match "app/templates/**/*.hbs" do
    handlebars
  end

  match "app/**/*.js" do
    # minispade method to make a closure of every js file
    # Besides that, we cut off the extra path, so we can invoke the module more easily.
    # ==== Example
    # `require('jquery');`
    minispade :rewrite_requires => true, :module_id_generator => proc { |input|
        input.path.sub(/^app\//, '').sub(/\.js$/, '')
    }
    uglify if production?
    concat "application.js"
  end

  match "vendor/**/*.js" do
    minispade :rewrite_requires => true, :module_id_generator => proc { |input|
        input.path.sub(/^vendor\//, '').sub(/\.js$/, '')
    }
    uglify if production?
    concat %w[
      vendor/jquery.js
      vendor/handlebars.js
      vendor/ember.js
    ], "application.js"
  end
end

input "assets/stylesheets" do
  match "**/base.scss" do
    sass
  end

  match "**/*.css" do
    yui_css if production?
    concat "application.css"
  end
end

# Finally, we keep our static assets that don't need any processing
  # in a `static/` directory.
input "assets/static" do
  match "**/*" do
    # The block we pass to `concat` lets us adjust the output path
    # of any files it matches. Here we take each input and strip
    # off the `static/` prefix, so `app/static/index.html` ends up
    # in `public/index.html`.
    concat do |input|
      input.sub(/static\//, '')
    end
  end
end